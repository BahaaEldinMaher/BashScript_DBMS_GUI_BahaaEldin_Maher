#! /usr/bin/bash
PATH=$PATH:~
validate_input() {
    local input="$1"
    if [[ $input =~ ^[a-zA-Z0-9_]+$ ]]; then
        return 0  # Valid input
    else
        return 1  # Invalid input
    fi
}

validate_inputtable() {
    local input="$1"
    if [[ $input =~ ^[a-z0-9_]+$ ]]; then
        return 0  # Valid input
    else
        return 1  # Invalid input
    fi
}


check_primary_key() {
    local table_name="$1"
    local primary_key="$2"

    # Use awk to check if the primary key exists in the table
    flag=0
    awk -v pk="$primary_key" -F',' '{ if ($1 == pk) flag=1 }' "$table_name"

    if [ $flag -eq 1 ]; then
        return 1  # Primary key already exists in the table
    else
        return 0  # Primary key does not exist in the table
    fi
}




check_primary_key() {
    local table_name="$1"
    local primary_key="$2"

    # Use awk to check if the primary key exists in the table
    if awk -v pk="$primary_key" -F',' '{ if ($1 == pk) exit 1 }' "$table_name"; then
        return 1  # Primary key already exists in the table
    else
        return 0  # Primary key does not exist in the table
    fi
}

# Create a table
create_table() {
    if [ -z "$DBName" ]; then
        zenity --error --text "You need to connect to a database first."
    else
        TBName=$(zenity --entry --title "Create Table" --text "Please enter Table Name:")
        if validate_inputtable "$TBName"; then
            if [ -e "$TBName" ]; then
                zenity --error --text "Table already exists."
            else
                touch "$TBName"
                zenity --info --text "Table created: $TBName"

                # Ask about columns and their datatypes
                metadata=$(zenity --entry --title "Create Table" --text "Enter metadata (column name:data type) to insert into the table (comma-separated):")
                # You might want to validate and sanitize input here based on your needs
                echo "$metadata" > "${TBName}_metadata"

                # Ask about primary key
                primary_key=$(zenity --entry --title "Create Table" --text "Enter the primary key for the table (must be the first column):")
                # You might want to validate and sanitize input here based on your needs
                echo "$primary_key" > "${TBName}_primary_key"

                zenity --info --text "Table metadata and primary key inserted into $TBName"
            fi
        else
            zenity --error --text "Invalid table name. Use only lowercase letters, numbers, and underscores."
        fi
    fi
}

# Insert into a table
insert_into_table() {
    if [ -z "$DBName" ] || [ -z "$TBName" ]; then
        zenity --error --text "You need to connect to a database and select a table first."
        return
    fi

    if [ -e "$TBName" ]; then
        metadata=$(cat "${TBName}_metadata")
        IFS=',' read -ra columns <<< "$metadata"

        # Check primary key
        if [ -e "${TBName}_primary_key" ]; then
            primary_key_col=$(cat "${TBName}_primary_key")
            primary_key_index=0 # Primary key is always the first column
        else
            zenity --error --text "Error: Primary key not defined for table $TBName."
            return
        fi

        # Create an associative array to store values and their data types
        declare -A values
        declare -A data_types

        # Read values for each column and store their data types
        for i in "${!columns[@]}"; do
            col_name="${columns[$i]%%:*}"
            col_type="${columns[$i]#*:}"

            if [ "$i" -eq "$primary_key_index" ]; then
                value=$(zenity --entry --title "Insert Data" --text "Enter value for primary key column '$col_name' ($col_type):")
            else
                value=$(zenity --entry --title "Insert Data" --text "Enter value for column '$col_name' ($col_type):")
            fi

            if [ -z "$value" ]; then
                zenity --error --text "Error: Value for column '$col_name' cannot be empty."
                return
            fi

            # Validate data type based on $col_type here
            if [[ $col_type =~ ^int$ ]] && ! [[ $value =~ ^[[:digit:]]+$ ]]; then
                zenity --error --text "Error: Invalid data type for column '$col_name'. Please enter a valid integer value."
                return
            fi

            if [[ $col_type =~ ^string$ ]] && ! [[ $value =~ ^[[:alpha:]]+$ ]]; then
                zenity --error --text "Error: Invalid data type for column '$col_name'. Please enter a valid string value."
                return
            fi

            values["$col_name"]=$value
            data_types["$col_name"]=$col_type
        done

        # Check if the primary key already exists in the table using the check_primary_key function
        if check_primary_key "$TBName" "${values["$primary_key_col"]}"; then
            zenity --error --text "Error: Primary key '${values["$primary_key_col"]}' already exists in table $TBName."
        else
            # Continue with the insertion process
            row="${values["$primary_key_col"]}"
            for i in "${!columns[@]}"; do
                col_name="${columns[$i]%%:*}"
                if [ "$col_name" != "$primary_key_col" ]; then
                    row+=",""${values["$col_name"]}"
                fi
            done

            # Append the row to the table file
            echo "$row" >> "$TBName"

            zenity --info --text "Values inserted into $TBName"
        fi
    else
        zenity --error --text "Metadata not found for table $TBName. Unable to insert values."
    fi
}

update_Table() {
    if [ -z "$DBName" ] || [ -z "$TBName" ]; then
        zenity --error --text "You need to connect to a database and select a table first."
        return
    fi

    if [ -e "$TBName" ]; then
        identifier=$(zenity --entry --title "Update Data" --text "Enter the unique identifier (e.g., primary key) for the row to update:")

        primary_key_col=$(cat "${TBName}_primary_key")

        # Check if the identifier exists in the primary key column
        if grep -q "^$identifier," "$TBName"; then
            new_values=$(zenity --entry --title "Update Data" --text "Enter the new values to update (comma-separated):")
           

            # Use awk to update the row with the provided identifier
            awk -v OFS=',' -v identifier="$identifier" -v new_values="$new_values" -F',' '{
                if ($1 == identifier) {
                    $0 = new_values
                }
                print $0
            }' "$TBName" > "$TBName.tmp"

            mv "$TBName.tmp" "$TBName"
            zenity --info --text "Row Updated Successfully"
        else
            zenity --error --text "Identifier '$identifier' not found in the table's primary key column."
        fi
    else
        zenity --error --text "Metadata not found for table $TBName. Unable to update values."
    fi
}

selectTable() {
    if [ -z "$DBName" ] || [ -z "$TBName" ]; then
        zenity --error --text "You need to connect to a database and select a table first."
        return
    fi

    if [ -e "$TBName" ]; then
        primary_keys=$(zenity --entry --title "Select Data" --text "Enter primary key values to select rows (comma-separated):")
      

        IFS=',' read -ra primary_keys_array <<< "$primary_keys"
        found=false

        for pk in "${primary_keys_array[@]}"; do
            # Use awk to find and print rows with the specified primary key values
            awk -v pk="$pk" -F',' '{
                if ($1 == pk) {
                    print $0
                    found=1
                }
            }' "$TBName" >> /tmp/selected_rows_temp.txt
        done

	  if [ "$found" = true ]; then
            zenity --info --text "No rows found with the provided primary key values."
        else
            selected_rows=$(cat /tmp/selected_rows_temp.txt)
            zenity --text-info --title "Selected Rows" --width=800 --height=400 --filename="/tmp/selected_rows_temp.txt"
            rm /tmp/selected_rows_temp.txt
        fi
       
    else
        zenity --error --text "Metadata not found for table $TBName. Unable to select rows."
    fi
}

deleteTable() {
    if [ -z "$DBName" ] || [ -z "$TBName" ]; then
        zenity --error --text "You need to connect to a database and select a table first."
        return
    fi

    if [ -e "$TBName" ]; then
        primary_keys=$(zenity --entry --title "Delete Data" --text "Enter primary key values to delete rows (comma-separated):")
        IFS=',' read -ra primary_keys_array <<< "$primary_keys"
        deleted=false

        for pk in "${primary_keys_array[@]}"; do
            # Use awk to filter and create a temporary file without the rows to delete
            awk -v pk="$pk" -F',' '{
                if ($1 != pk) {
                    print $0
                }
            }' "$TBName" > "$TBName.tmp"

            if [ -s "$TBName.tmp" ]; then
                mv "$TBName.tmp" "$TBName"
                deleted=true
                echo "Row(s) with primary key '$pk' deleted."
            else
                rm -f "$TBName.tmp"
            fi
        done

        if [ "$deleted" = false ]; then
            echo "No rows found with the provided primary key values."
        fi
    else
        echo "Metadata not found for table $TBName. Unable to delete rows."
    fi
}

#createDatabase(folder) -> create dir to store tables
#listDatabase -> list only directory
#connectDatabase -> cd dir
#====
#create table
#insert into table(file) -> sed , echo 
#select from table -> cat file
#updatetable
#--deleteDatabase
#--Delete Table
#DROP Table

if [ -e ~/bashproject/Databases ]
then 
	cd -e ~/bashproject/Databases
	echo "inside Databases dir"
else
	mkdir -e ~/bashproject/Databases
	cd -e ~/bashproject/Databases
	echo "Databases created and you are connected"
fi
while true; do
    option=$(zenity --list --title "Database Management Menu" --column "Option" "Create Database" "List Databases" "Connect to Database" "Create Table" "Insert into Table" "Select from Table" "Update Table" "Delete from Table" "Drop Table" "Drop Database")

    case "$option" in
        "Create Database")
            DBName=$(zenity --entry --title "Create Database" --text "Please enter Database Name:")
            if validate_input "$DBName"; then
                if [ -e "$DBName" ]; then
                    zenity --error --text "Database already exists."
                else
                    mkdir "$DBName"
                    zenity --info --text "Database created: $DBName"
                fi
            else
                zenity --error --text "Invalid database name. Use only letters, numbers, and underscores."
            fi
            ;;
        "List Databases")
            zenity --info --text "List of Databases:\n$(ls -F ~/bashproject/Databases | grep /$)"
            ;;
        "Connect to Database")
            DBName=$(zenity --entry --title "Connect to Database" --text "Please enter Database Name:")
            if [ -e "$DBName" ]; then
                cd "$DBName"
                zenity --info --text "You are now connected to $DBName"
            else
                zenity --error --text "Database not found."
            fi
            ;;
        "Create Table")
            create_table
zenity --info --text "Table Created successfully."
            ;;
        "Insert into Table")
TBName=$(zenity --entry --title "insert into Table" --text "Type the name of the table you wish to insert into:")

            insert_into_table
zenity --info --text "inserted into table successfully."
            ;;
        "Select from Table")
	TBName=$(zenity --entry --title "Select Table" --text "Type the name of the table you wish to select:")

            selectTable

            ;;
        "Update Table")
TBName=$(zenity --entry --title "Update Table" --text "Type the name of the table you wish to update:")

            update_Table
zenity --info --text "Table updated successfully."
            ;;
        "Delete from Table")
TBName=$(zenity --entry --title "delete from Table" --text "Type the name of the table you wish to delete from:")

            deleteTable
zenity --info --text "table row deleted successfully."
            ;;
        "Drop Table")
            TBName=$(zenity --entry --title "Drop Table" --text "Type the name of the table you wish to drop:")
            if [ -e "$TBName" ]; then
                rm -r "$TBName"
                rm -r "${TBName}_metadata"
                rm -r "${TBName}_primary_key"
                zenity --info --text "Table dropped successfully."
            else
                zenity --error --text "Table not found."
            fi
            ;;
        "Drop Database")
            DBName=$(zenity --entry --title "Drop Database" --text "Type the name of the database you wish to drop:")
            if [ -e "$DBName" ]; then
                rm -r -f "$DBName"
                zenity --info --text "Database dropped successfully."
            else
                zenity --error --text "Database not found."
            fi
            ;;
        *)
            # Handle other cases or exit the loop
            break
            ;;
    esac
done